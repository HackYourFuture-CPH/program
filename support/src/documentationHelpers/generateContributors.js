#!/usr/bin/env node
/**
 * .github/scripts/contributors.js
 *
 * Run manually with: node .github/scripts/contributors.js
 * Prints a Markdown table of contributors with linked avatars.
 */

const fetch = global.fetch;

// ---------------- CONFIG ----------------
const REPO = "HackYourFuture-CPH/program";
const TITLE = "Contributors";
const INTRO = "Thanks to these wonderful volunteers and contributors for improving the HackYourFuture Program ðŸ’™.";
const PER_ROW = 6;
const AVATAR_SIZE = 80;
const EXCLUDE_LOGINS = [];
// ----------------------------------------

const API_BASE = "https://api.github.com";

function parseLinkHeader(link) {
  const rels = {};
  if (!link) return rels;
  link.split(",").forEach((part) => {
    const section = part.split(";");
    if (section.length !== 2) return;
    const url = section[0].trim().replace(/^<|>$/g, "");
    const name = section[1].trim().replace(/rel="(.*)"/, "$1");
    rels[name] = url;
  });
  return rels;
}

async function fetchPaginated(url) {
  let results = [];
  let next = url;
  while (next) {
    const res = await fetch(next, {
      headers: { "User-Agent": "contributors-script" },
    });
    if (!res.ok) {
      throw new Error(
        `GitHub API error ${res.status} ${res.statusText} for ${next}`
      );
    }
    const page = await res.json();
    results = results.concat(page);
    const link = res.headers.get("link");
    const rels = parseLinkHeader(link);
    next = rels.next || null;
  }
  return results;
}

function isBotLogin(login) {
  if (!login) return false;
  return (
    login.toLowerCase().endsWith("[bot]") ||
    login.toLowerCase().includes("-bot") ||
    login.toLowerCase().includes("bot/")
  );
}

function withAvatarSize(url, size) {
  if (!url) return url;
  return url + (url.includes("?") ? `&s=${size}` : `?s=${size}`);
}

function chunk(array, size) {
  const chunks = [];
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
}

async function fetchContributors(repo) {
  const url = `${API_BASE}/repos/${repo}/contributors?per_page=100&anon=false`;
  const data = await fetchPaginated(url);
  return data
    .map((c) => ({
      login: c.login,
      html_url: c.html_url || `https://github.com/${c.login}`,
      avatar_url: c.avatar_url,
      contributions: c.contributions || 0,
      type: c.type || "User",
    }))
    .filter((c) => !!c.login);
}

function filterAndSortContributors(items) {
  let list = items.filter((c) => {
    const excluded =
      EXCLUDE_LOGINS.includes(c.login.toLowerCase()) || isBotLogin(c.login);
    const isUser = (c.type || "User") === "User";
    return isUser && !excluded;
  });

  // sort by most commits and then alphabetically if a tie
  list.sort((a, b) => {
    const byContrib = (b.contributions || 0) - (a.contributions || 0);
    if (byContrib !== 0) return byContrib;
    return a.login.localeCompare(b.login, "en");
  });

  return list;
}

function renderMarkdown(contributors) {
  const date = new Date().toISOString().split("T")[0];
  const total = contributors.length;

  let out = `# ${TITLE}

<!-- This page's markdown is automatically generated by running "npm run generate:contributors and pasted here -->

${INTRO}

Total: **${total}** contributor${
    total === 1 ? "" : "s"
  }

`;

  if (total === 0) {
    out += "_No contributors found (after filtering)._";
    return out;
  }

  // Chunk into rows
  const rows = chunk(contributors, PER_ROW);

  // First row: avatars
  rows.forEach((row) => {
    const avatarCells = row.map(
      (c) =>
        `[![${c.login}](${withAvatarSize(
          c.avatar_url,
          AVATAR_SIZE
        )})](${c.html_url})`
    );
    const sep = row.map(() => "---");
    const nameCells = row.map((c) => `[@${c.login}](${c.html_url})`);

    out += `| ${avatarCells.join(" | ")} |\n`;
    out += `| ${sep.join(" | ")} |\n`;
    out += `| ${nameCells.join(" | ")} |\n\n`;
  });

  out +=
    "<sub>Fancy seeing your face here too? Start by opening a PR to contribute a change, fix a typo, or share an even bigger idea! Read the [Contributing Guide](./README.md) for more info.</sub>\n";

  return out;
}

async function main() {
  try {
    const raw = await fetchContributors(REPO);
    const contributors = filterAndSortContributors(raw);
    const md = renderMarkdown(contributors);
    console.log(md);
  } catch (err) {
    console.error("Error:", err.message);
    process.exit(1);
  }
}

main();
