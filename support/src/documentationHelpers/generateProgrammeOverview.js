import { readFile, writeFile, stat } from "fs/promises";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const scriptDir = dirname(fileURLToPath(import.meta.url));
const jsonPath = join(scriptDir, "programmeStructure.json");
const outputLines = [];

function extractLearningGoals(content) {
  const sectionRegex = /#+\s*Learning goals\s*\n([\s\S]*?)(?=\n#+\s|$)/i;
  const match = content.match(sectionRegex);

  if (!match) return { found: false, goals: [] };

  const section = match[1];
  const lines = section.split("\n");
  const bullets = lines.filter((line) => /^\s*[-*+]\s+.+/.test(line));

  return {
    found: true,
    goals: bullets.map((b) => b.replace(/^\s*/, (match) => match)),
  };
}

async function processCourses() {
  const data = JSON.parse(await readFile(jsonPath, "utf-8"));
  const courses = data.courses;

  outputLines.push(
    "<!-- This file is automatically generated via the generateProgrammeOverview script. Please do not edit this file directly. -->\n",
  );
  outputLines.push("# Programme Overview\n");

  for (const [index, course] of courses.entries()) {
    const isLastCourse = index === courses.length - 1;
    outputLines.push(`## ${course.name}\n`);

    for (const module of course.modules) {
      outputLines.push(`### ${module.name}\n`);

      const modulePath = join(scriptDir, "../../../", module.location);
      const readmePath = join(modulePath, "README.md");

      // Check if module directory exists
      try {
        const moduleStats = await stat(modulePath);
        if (!moduleStats.isDirectory()) {
          outputLines.push(
            `> ❌ Module path is not a directory: \`${module.location}\`\n`,
          );
          continue;
        }
      } catch {
        outputLines.push(
          `> ❌ Module directory not found at \`${module.location}\`\n`,
        );
        continue;
      }

      // Try reading README
      let content;
      try {
        content = await readFile(readmePath, "utf-8");
      } catch {
        outputLines.push(
          `> ❌ Missing README.md in module directory \`${module.location}\`\n`,
        );
        continue;
      }

      const { found, goals } = extractLearningGoals(content);
      if (!found) {
        outputLines.push(
          `> ❌ "Learning goals" section not found in \`${module.location}\`\n`,
        );
      } else if (goals.length === 0) {
        outputLines.push(
          `> ⚠️ "Learning goals" section is empty in \`${module.location}\`\n`,
        );
      } else {
        goals.forEach((goal) => outputLines.push(`${goal}`));
      }

      outputLines.push("");
    }

    if (!isLastCourse) {
      outputLines.push("");
    }
  }

  const outputPath = join(scriptDir, "../../../programme-overview.md");
  await writeFile(outputPath, outputLines.join("\n"), "utf-8");
  console.log(`✅ Summary written to ${outputPath}`);
}

processCourses();
